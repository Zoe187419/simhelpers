"0","# t and p value"
"0","calc_t <- function(est, vd, df, method){"
"0",""
"0","  se <- sqrt(vd)  # standard error "
"0","  t <- est / se # t-test "
"0","  p_val <-  2 * pt(-abs(t), df = df) # p value"
"0","  ci <- est + c(-1, 1) * qt(.975, df = df) * se # confidence interval"
"0","  "
"0","  res <- tibble(method = method, est = est, p_val = p_val, "
"0","                lower_bound = ci[1], upper_bound = ci[2])"
"0",""
"0","  return(res)"
"0","}"
"0",""
"0",""
"0","estimate <- function(dat, n1, n2){"
"0",""
"0","  # calculate summary stats"
"0","  means <- tapply(dat$y, dat$group, mean)"
"0","  vars <- tapply(dat$y, dat$group, var)"
"0",""
"0","  # calculate summary stats"
"0","  est <- means[1] - means[2] # mean diff"
"0","  var_1 <- vars[1] # var for group 1"
"0","  var_2 <- vars[2] # var for group 2"
"0",""
"0","  # conventional t-test"
"0","  dft <- n1 + n2 - 2  # degrees of freedom"
"0","  sp_sq <- ((n1 - 1) * var_1 + (n2 - 1) * var_2) / dft  # pooled var"
"0","  vdt <- sp_sq * (1 / n1 + 1 / n2) # variance of estimate"
"0",""
"0","  # welch t-test"
"0","  dfw <- (var_1 / n1 + var_2 / n2)^2 / (((1 / (n1 - 1)) * (var_1 / n1)^2) + ((1 / (n2 - 1)) * (var_2 / n2)^2))  # degrees of freedom "
"0","  vdw <- var_1 / n1 + var_2 / n2 # variance of estimate"
"0",""
"0","  results <- bind_rows(calc_t(est = est, vd = vdt, df = dft, method = ""t-test""),"
"0","                   calc_t(est = est, vd = vdw, df = dfw, method = ""Welch t-test""))"
"0",""
"0",""
"0","  return(results)"
"0",""
"0","}"
"0",""
